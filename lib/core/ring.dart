import 'package:ninja_prime/ninja_prime.dart';
import 'package:crypto/crypto.dart';
import 'dart:convert';

class Ring {
  List<BigInt> publicKeys;
  int l = 2048;
  int publicExponent = 65537;

  BigInt p = BigInt.from(0);
  int amountOfKeys = 0;
  BigInt q = BigInt.from(0);

  Ring(this.publicKeys) {
    amountOfKeys = publicKeys.length;
    q = BigInt.one << (l - 1);
  }

  List<BigInt> sign(String message, int myIndexKey, BigInt privateKey) {
    permutation(message);
    List<BigInt> signatures = List<BigInt>.filled(amountOfKeys, BigInt.from(0));
    BigInt u = randomBigInt(l - 1);
    var c = E(u);
    var v = E(u);
    for (int i = myIndexKey + 1; i < amountOfKeys; i++) {
      signatures[i] = randomBigInt(l - 1);
      var e = g(signatures[i], BigInt.from(publicExponent), publicKeys[i]);
      v = E(v ^ e);
      if ((i + 1) % amountOfKeys == 0) {
        c = v;
      }
    }
    for (int i = 0; i < myIndexKey; i++) {
      signatures[i] = randomBigInt(l - 1);
      var e = g(signatures[i], BigInt.from(publicExponent), publicKeys[i]);
      v = E(v ^ e);
      if ((i + 1) % amountOfKeys == 0) {
        c = v;
      }
    }
    signatures[myIndexKey] = g(v ^ u, privateKey, publicKeys[myIndexKey]);
    return [c] + signatures;
  }

  void permutation(String message) {
    var bytes = utf8.encode(message);
    var digest = sha1.convert(bytes);
    p = BigInt.parse(digest.toString(), radix: 16);
  }

  BigInt E(BigInt x) {
    String message = x.toString() + p.toString();
    var bytes = utf8.encode(message);
    var digest = sha1.convert(bytes);
    return BigInt.parse(digest.toString(), radix: 16);
  }

  BigInt g(BigInt random_value, BigInt publicExponent, BigInt publicKey) {
    var q = random_value ~/ publicKey;
    var r = random_value % publicKey;
    BigInt result;
    if (((q + BigInt.one) * publicKey) <= (BigInt.one << l) - BigInt.one) {
      result = q * publicKey + r.modPow(publicExponent, publicKey);
    } else {
      result = random_value;
    }
    return result;
  }
}

main() {
  int myKeyIndex = 3;  // this means that public key of my private key is on the 4 place in the arr
  BigInt privateKey = BigInt.parse(
      "24215577406705781122004741512925987739750601147895778723634413127916617992700941002072626430610331952758507314518389208505517093017215985293106310999819596981413724454670411034163011852433768252209401716367574215171431022143309391186729454856772286499272768743873768838781451141062743472704944296978807398893");
  List<BigInt> publicKeys = [
    BigInt.parse(
        "146257484477384048941163188880756896973724519514314982392166991128806269852377912197573880069654374817988352753843600998469639021788819372376879045512695367006967436704266098261885446554375531604535297750443074748162444675458806912252245125316072211749403027380018889330211529779799789258985914172158497536769"),
    BigInt.parse(
        "101427618875115180697812847695212917070748945405594946191348310062902180091468512811700016020248228273178191738715120549909479701452285253011733442258389499616950694930939237017479917320114315743348092479524574674735082629766333767379293460849763816536392546020020688204126527912267390867650258086267646979967"),
    BigInt.parse(
        "112147700484355372449428776952025555949617878052609924216026500243550536911589677481470340160762627950936934480298976449853453950219044952385715501842755225741058003217238336182279046337562515413546134590197745571869266611383171624611361588035878320954209518398112870674309842295944486699779980851535678108877"),
    BigInt.parse(
        "129966120424476027957810559702942466505612574517209536500763945062998230561595411551292581965679250281544041755105370039949723505451583328814536754073800442781265780134504222594564965707553116644897375643599033425781750744341554310920239693694644832883908858194445144745225094319046397908710567665296328009849"),
    BigInt.parse(
        "130097970739717950380042681631626681784409506349347612196398927717268801209267894482772218154047016760295356274665475459571520147599163504503578766337623619678884103753136457434957122561996075769058381105200328941774030200249432232070215633613135661056974718137864914054282035610239568879790414498939613996853"),
    BigInt.parse(
        "152281306192292616849668950685032099477122946476250094146184156647863315781147427078147837169300144266691496756291181429655262460457417189432682981299887187279368984171616278940015895267972336197657908464019604181598688704272986992821717443065725363769188368387655664795193074006639059141237179016595559418997"),
    BigInt.parse(
        "112264597543168570811843905105052148975992778558963643589501227923831351296993885363297400067776029032370527391205153447490257166088313958217042775811466111039769617011029679898580846084463032719546803983240557471503125407739726739671519448846731679246964537918422917648513125758132852616721252941800521404983"),
    BigInt.parse(
        "150576180502850378669232039234974018507369949733866576045185283187130117573939554831526472160594600668814207397328975086055509184866107586462542565971596204840192125705439122789314919414637941065384406478506032055493786650042303170547271787882078765790800917449408025993222166558823821925236046715753991571437")
  ];
  Ring ring = Ring(publicKeys);
  print(ring.sign("hello", myKeyIndex, privateKey));
}
